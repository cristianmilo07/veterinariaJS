// Promesa  -- promises

const miPromesa = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("set time out finalizo primera instancia")
  }, 2000);
});

miPromesa.then(
respuesta => console.log(respuesta),
razon => console.log(razon)
);


/// otro ejemplo
const miPromesaTiempo = new Promise((resolve, reject) => {
   const tiempoRejected = Math.floor(Math.random() *10000) + 1000;
  const tiempoResolved = Math.floor(Math.random() *10000) + 1000;
  setTimeout(() => {
    reject("la promesa falló")
  }, tiempoRejected);
  setTimeout(() => {
    resolve("set time out finalizo")
  }, tiempoResolved);
});

miPromesaTiempo.then(
respuesta => console.log(respuesta),
razon => console.log(razon)
);

/// otro ejemplo más complejo

const fabricaDepromesas = indice =>
  new Promise((resolve, reject) =>{
  const tiempoRejected = Math.floor(Math.random() *10000) + 1000;
  const tiempoResolved = Math.floor(Math.random() *10000) + 1000;
    
     setTimeout(() => {
    resolve(`promesa ${indice} satisfecha`);
  }, tiempoResolved);
  });

let misPromesas = [];
for (let i = 0; i< 10; i++){
  misPromesas = [...misPromesas, fabricaDepromesas(i)]
}

misPromesas.forEach(promesasActual =>
                   promesasActual
                   .then(respuesta => console.log(respuesta))
                   .catch(razon => console.og(razon))
                   );